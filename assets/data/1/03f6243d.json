{"data":{"post":{"title":"(Python3) Sequences of Characters","date":"December 07 2019","author":"Jooho Yoon","content":"<p>Python3에서 Unicode를 어떻게 다루는지 공부했던 것들을 기록해본다.</p>\n<h1 id=\"abstract\"><a href=\"#abstract\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Abstract</h1>\n<p>다국어 프로그램을 다루기 위해서는 unicode에 대한 이해가 필수적이다.\n(ASCII -> ANSI -> Unicode)\n사실 네이버로 이직한 이후로는 쭉 백엔드 웹서버 개발만 하기 때문에\n지금은 unicode를 고려하고 구현할일이 없다.\n옛날 TmaxOS 개발에 참여했을 당시에는 나라별로 미리 정의된 다른 메세지를\n보여주어야 했었는데, 그때 유심히 본 기억이 있다.\n아무튼 Python3에서 unicode와 관련한 <strong>가장 중요하고\n간단한 사실은 <code>str</code>은 unicode를 저장한다는 점이다.</strong></p>\n<h1 id=\"unicode\"><a href=\"#unicode\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Unicode</h1>\n<p>Unicode standard는 문자를 0x0부터 0x10FFFF 사이의 code point들로 표현하는\n방법을 정의한다. unicode를 다루는 포스트에서 110만(0x10FFFF=1,114,111)이라는\n숫자가 자주 등장하는 이유가 여기있다. 즉, Unicode는 sequence of code points이며\n각 code point는 sequence of byte로 <strong>encoding</strong>된다.\n아래의 예는 Unicode 문자열 \"hello\"를 UTF-8로 encoding하는 과정을 보여준다.\n<img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1209 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-5'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-5)' width='1209' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAIAAAC2bqvFAAAACXBIWXMAAAsSAAALEgHS3X78AAAGDklEQVRYw%2b1YWzNjWRT2MzzhQXlQSrm8uD2oorzw6o0XRfHCC1P%2bAapb13R5IukhzNDGrZR0DyZENIIwiE4EQ1wiV4lELuRuvpydnDmS43RX0Houu06dWmfvtdfaa6%2b91rf2Sbh73hZ8Zvl3Cc%2by6mDQ67QGfZ7wh98X8HtA3AUD37sBWC3eHptBI/lJu/yzfu1X3covurVh7ZJAJx20qCT/EA9gwx2Xnmuj26pzmTVumx6E26r3OixRnAGqPaUB2EKfzxf2vN9/9923hIdOAjkMHA0756MaKyfpdDjs6%2bvrPp%2bXdMUyqNVqpVJJf8Y2bCKHlnsGEI7z8/Oqqqrb29vNzc26ujri3y8aw2oe3lKpNCcnB9JihRD3trS01NfXgyBuf5QHiEqVSpWUlHR6ejo8PJyZmclqAOkET3V1dUNDw%2bXl5UM8q6ur%2bfn5brf7IQNaW1ubmppYDSASxGJxSUkJ7PR6vaxbGW0AfJqYmAitaWlpBQUFrAYQ3ZWVlWVlZbm5uc3NzfgkCmINyMvL4zagsbEx1gDCfHNzk56eLhAISktLu7q66FlcBuzv7ycnJx8eHg4ODmZlZXF4oLCwsLy8vK2tbWJiIlY04VlZWYEbnU4nxxGqqal5yACTyZSamqrVamtra2Eqq6OiDTg%2bPi4uLobpS0tLWB%2bHAUKhENtfUVGxvb1Nd0at4OrqKjs7e3x8PNZC8jk5OZmRkWGz2R7S0tHRkZKSUlRUhOCM1cKShSDXbrfjDb87HA7uALJYLDhysJYj0CHN5XJxCCHqOJBRp9ORlbCqiB/IaMSI2fhQyRAiyBMZCL9JQREZ8ng8HCmSXjRHWn8UEr97x%2b/p6WE94pEyLsio54J3jHXQUd7R0a5QfGY9Hs9YSpB1fPgg7Onp9lBJxu92mndnUfCYtoUW5TxKIP3ae9vx%2bqX8N3SCNit%2bR6dxW2hYHzHIRlHtUSF31N7ednJyEh/axG8A2a3FxcWBgYGwiwMBp05lP9t2aD7bz%2bXXJ5t4bi2aEK3euFbLbq%2b0N0Y1Ph2h0S2vKxS4Vqv17dsfEevf1AA6SfN4PXw%2bH6Ech3rCPzcn6ux8tbW19WQGBO435AdWucQDEolkfn4OPPiEB4gj7iIPZocev88ffvwUT4AK8QDJPEhio6MjZrOZNQYov95rXEgc30GKb9u4U1k8HiDrwGEAPKECGxkZ6e/vn5qa6u7uXltbY24P4QQ2gQ0eAAOgfmhoCDTNRngwcXp6en5%2bnsfjjY2NAdrxSY9iukgkWlhYwCGEOkiAuigtmAU8BRsirbe3F7pQYkb56p4HsBnwqV6vR6EG4uLi4uDgIKpWIwQYgC9g%2bJNqKD0wi5m28TYYDGdnZygEgO7gB5tGo6FHjUYjGUU/stDR0RE%2bowxAPxigBQTYUOYQTGS6/VluZC95oSHHmjtuaLbVValMJkM6IlP%2bBl0Ka0kSoEI5nA%2bYro%2bUXkcSyQLxXmxBEZVOWDPKo4AMh/L161cPIPFXIYlMtt7a%2bsPOzs63RuJItbzc3y9gmhTw3gLLrvYXHZpdp/7AeaFw6Q98N9d4HBrQhz6XLej3MiLBACCLD0keBWRE2cePQoGgL1KkUcWZ3aSXDpoVIuvhivGPSdPWpEbCC/1ckQ5qxN0oJdTCDpfpmPpzEdoCxC4M0Om0L4DEqLf5fF5fX%2b%2bX948xhJIJIEb7EEj85k2nXL7zNAaQrSUBStOxcUz/ccHOIffR0cZkC0Z6IkMUHYlCOuhx39/bUxKa1suEYeYa6PbsP7ZeII0Ss1BU4X4I8MNddmNjA8lhDj4WiVQqFfPoo3RZXl4GeCkUChSkwGAQ6AE/fbVHZsQQ0BB4jKIfGARMBCqjk1w1oQWdcrn806dPe3t7GAUqgybXS8q9OjADwogEwgOlIJjVxz0DsGilUokFYSYs2d3dBfjPzMzQ/57ouzaWS8AVzFAMuXgzRQNBsRq8oR5VA04ajJmdnRWLxfQWoAdTwAYCC8VOQRoKbCIBAIxlALCJBALnkANdzD8g/y4k/vogpnkCjGC9F8RsIUj/yo3SEqX3PxnE/xvwYu0vIJS8E/Gl3mMAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"1209\" data-srcset=\"/assets/static/unicode-encoding.82a2fbd.ff5856f.png 480w, /assets/static/unicode-encoding.cbab2cf.ff5856f.png 1024w\" data-sizes=\"(max-width: 1209px) 100vw, 1209px\" data-src=\"/assets/static/unicode-encoding.cbab2cf.ff5856f.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/unicode-encoding.cbab2cf.ff5856f.png\" width=\"1209\"></noscript></p>\n<h1 id=\"in-python\"><a href=\"#in-python\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>In Python</h1>\n<p>Python3에서 문자열(sequence of characters)을 표현하는 방법은\n<code>str</code>와 <code>bytes</code> 두가지이다. (참고. Python2는 <code>unicode</code>와 <code>str</code>)</p>\n<ul>\n<li>\n<p>Two types that reprsent sequences of characters in Python3</p>\n<ul>\n<li><code>str</code>: unicode chracters를 저장</li>\n<li><code>bytes</code>: raw 8-bit을 저장</li>\n</ul>\n</li>\n</ul>\n<p>Python3의 <code>str</code>은 unicode를 저장하는 용도로 사용된다.\n따라서 unicode 문자열을 만드는 방법은 아주 쉽다.\nsingle/double/triple-quote로 정의한 string literal은 모두 unicode string이다.\n하나의 unicode character를 만들고 싶다면, <code>chr()</code>을 사용하면 되고, 해당하는\ncode point는 <code>ord()</code>를 통해 구할 수 있다.\n또한, Python3에서는 소스코드의 기본 인코딩이 UTF-8이기 때문에 별도의 명시없이\nunicode로 문자열을 정의할 수 있다. Identifier에도 unicode를 사용할 수\n있기 때문에 아래의 코드도 문제없이 실행된다.</p>\n<pre class=\"language-sh\"><code class=\"language-sh\">Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> 주호 = 'jooho'\n>>> print(주호)\njooho</code></pre>\n<p><code>bytes</code>는 unicode가 아닌 1byte로 표현되는 문자들을 저장하기위한\n용도로 사용된다. (Python2와 달리) <code>bytes</code>라는 이름이 \"byte들\"을 의미한다는\n점에서 이해하기 쉽다. <code>str</code>과 <code>bytes</code>를 다룰 때는 encoding/decoding을\n주의해서 사용해야한다.</p>\n<ul>\n<li>Should not assume anything about character encodings</li>\n<li>\n<p>Two common situations in Python code</p>\n<ul>\n<li>You want to operate on raw 8-bit values that are UTF-8 encoded characters</li>\n<li>You want to operate on Unicode characters that have no specific encoding</li>\n</ul>\n</li>\n</ul>\n<p>따라서 아래와 같이 <code>str</code>/<code>bytes</code> 모두를 받아서 실수없이 <code>str</code>/<code>bytes</code>로\n바꿔주는 helper 함수가 필요할 수도 있다.</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">to_str</span><span class=\"token punctuation\">(</span>bytes_or_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>bytes_or_str<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    value <span class=\"token operator\">=</span> bytes_or_str<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span>‘utf<span class=\"token operator\">-</span><span class=\"token number\">8</span>’<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    value <span class=\"token operator\">=</span> bytes_or_str\n  <span class=\"token keyword\">return</span> value <span class=\"token comment\"># Instance of str</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">to_bytes</span><span class=\"token punctuation\">(</span>bytes_or_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>bytes_or_str<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    value <span class=\"token operator\">=</span> bytes_or_str<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>‘utf<span class=\"token operator\">-</span><span class=\"token number\">8</span>’<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    value <span class=\"token operator\">=</span> bytes_or_str\n  <span class=\"token keyword\">return</span> value <span class=\"token comment\"># Instance of bytes</span></code></pre>\n<h2 id=\"problems-in-python2\"><a href=\"#problems-in-python2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Problems in Python2</h2>\n<p>(곧 Python2는 deprecated되지만)\nUnicode와 관련된 Python2에의 첫번째 문제점은\nASCII 문자열이 저장된 <code>str</code>의 경우, encode() 결과도 여전히 <code>str</code>이라는 점이다.\n따라서 ASCII 문자열만이 정상동작하고, 그렇지 않은 경우\n예상과 달리 동작하는 함수를 만들 수 있다. Python3의 경우 empty string 조차도\n<code>str</code>과 <code>bytes</code>는 전혀 다른 type이다.</p>\n<p>두번째 문제점은 file operation들이 기본 binary encoding이라는 점이다.\n따라서 Unicode로 작성된 파일을 읽고/쓰는데 불편했지만, Python3에서는\n기본 UTF-8 encoding이 적용된다. Python3에서는 binary로 읽고/쓰기 위해서는\n'rb', 'wb'로 mode를 명시해주어야한다.</p>\n<h1 id=\"summary\"><a href=\"#summary\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Summary</h1>\n<ul>\n<li>\n<p>Python 3</p>\n<ul>\n<li><code>bytes</code>: sequences of 8-bit values.</li>\n<li><code>str</code>: sequences of Unicode characters.</li>\n<li><code>bytes</code> != <code>str</code></li>\n</ul>\n</li>\n<li>\n<p>Python 2</p>\n<ul>\n<li><code>str</code> contains sequences of 8-bit values.</li>\n<li><code>unicode</code> contains sequences of Unicode characters.</li>\n<li><code>str</code> == <code>unicode</code> if the <code>str</code> only contains 7-bit ASCII characters.</li>\n</ul>\n</li>\n<li>Binary data to/from a file: binary mode ('rb' or 'wb').</li>\n</ul>\n<h1 id=\"reference\"><a href=\"#reference\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reference</h1>\n<ul>\n<li><a href=\"https://docs.python.org/3/howto/unicode.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">python.org</a></li>\n<li>Effective Python</li>\n</ul>\n"},"all":{"edges":[{"node":{"path":"/blog/python-bytes-str","title":"(Python3) Sequences of Characters"},"next":{"path":"/blog/initial-post"}},{"node":{"path":"/blog/initial-post","title":"Initial Post"},"next":null}]}},"context":{}}